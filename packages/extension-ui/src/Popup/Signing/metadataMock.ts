// Copyright 2019-2021 @polkadot/extension-ui authors & contributors
// SPDX-License-Identifier: Apache-2.0

import { MetadataDef } from '@reef-defi/extension-inject/types';

export const westendMetadata = {
  chain: 'Westend',
  color: '#da68a7',
  genesisHash: '0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e',
  icon: 'polkadot',
  metaCalls: '',
  specVersion: 45,
  ss58Format: 42,
  tokenDecimals: 12,
  tokenSymbol: 'WND',
  types: {
    Address: 'AccountId',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ProxyType: {
      _enum: [
        'Any',
        'NonTransfer',
        'Staking',
        'Unused',
        'IdentityJudgement'
      ] as unknown
    }
  }
} as MetadataDef;
